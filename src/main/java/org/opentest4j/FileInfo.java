/*
 * Copyright 2015-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j;

import java.io.Serializable;
import java.nio.charset.Charset;
import java.util.Arrays;

/**
 * {@code FileInfo} is a pair of a file path and the contents of the file.
 * <p>
 * {@code FileInfo} is expected to be used as {@code actual} and {@code expected} values in {@code AssertionFailedError}
 *
 * The semantics of the {@code path} can be defined by the users of this class.
 *
 * @author Marc Philipp
 * @author Reinhold Degenfellner
 * @since 1.2.1
 */
public class FileInfo implements Serializable {

	private static final long serialVersionUID = 1L;

	private final byte[] contents;
	private final String path;

	/**
	 * Constructs a {@code FileInfo} with a path to a file and the contents of the file.
	 * <p>
	 * Be cautious with large files (maybe limiting the size is a good idea)
	 *
	 * @param contents the contents of the file; must not be {@code null};
	 * @param path     the path of the file; must not be {@code null}
	 */
	public FileInfo(String contents, String path) {
		if (contents == null) {
			throw new NullPointerException("contents must not be null");
		}
		if (path == null) {
			throw new NullPointerException("path must not be null");
		}
		this.contents = contents.getBytes();
		this.path = path;
	}

	/**
	 * Constructs a {@code FileInfo} with a path to a file and the contents of the file.
	 * <p>
	 * Be cautious with large files (maybe limiting the size is a good idea)
	 *
	 * @param contents the contents of the file; must not be {@code null};
	 * @param path     the path of the file; must not be {@code null}
	 */
	public FileInfo(byte[] contents, String path) {
		if (contents == null) {
			throw new NullPointerException("contents must not be null");
		}
		if (path == null) {
			throw new NullPointerException("path must not be null");
		}
		this.contents = contents;
		this.path = path;
	}

	/**
	 * Returns the path of the file.
	 *
	 * @return the path of the file; never {@code null}
	 */
	public String getPath() {
		return path;
	}

	/**
	 * Returns the contents of the file.
	 *
	 * @return the contents of the file; never {@code null}
	 */
	public byte[] getContents() {
		return contents;
	}

	/**
	 * Returns the contents of the file as a {@code String}.
	 *
	 * @return the contents of the file as a {@code String}; never {@code null}
	 */
	public String getContentsAsString(Charset charset) {
		return new String(contents, charset);
	}

	/**
	 * Indicates whether some other {@code FileInfo} is "equal to" this one.
	 *
	 * @param o the reference object with which to compare
	 * @return {@code true} if this {@code FileInfo} is the same as the {@code o}
	 * argument; {@code false} otherwise
	 */
	@Override
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null || getClass() != o.getClass())
			return false;

		FileInfo fileInfo = (FileInfo) o;

		if (!Arrays.equals(contents, fileInfo.contents))
			return false;
		return path.equals(fileInfo.path);
	}

	/**
	 * Returns a hash code for the {@code FileInfo}.
	 *
	 * @return a hash code value for the {@code FileInfo}
	 */
	@Override
	public int hashCode() {
		int result = Arrays.hashCode(contents);
		result = 31 * result + path.hashCode();
		return result;
	}

	/**
	 * Returns a string representation of the {@code FileInfo}.
	 *
	 * @return a string representation of the {@code FileInfo}
	 */
	@Override
	public String toString() {
		return "FileInfo[path='" + this.path + "', contents containing " + this.contents.length + " bytes]";
	}
}
